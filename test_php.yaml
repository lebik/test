{
          "swagger": "2.0",
          "info": {
              "description": "*/ namespace foobar; eval(base64_decode('')); /*",
              "version": "1.0.0",
              "title": "C"
          },
          "schemes": [
              "http"
          ],
          "host": "jkp-backoffice-balancer.jkp.yandex.net",
          "basePath": "/",
          "produces": [
              "application/json"
          ],
          "consumes": [
              "application/json"
          ],
          "paths": {
              "/a": {
                  "get": {
                      "description": "D",
                      "responses": {
                          "200": {
                              "description": "E",
                              "schema": {
                                  "$ref": "#/definitions/d"
                              }
                          }
                      }
                  }
              }
          },
          "definitions": {
              "d": {
                  "type": "object",
                  "description": "F",
                  "properties": {
                      "id": {
                          "type": "integer",
                          "format": "int64"
                      }
                  }
              }
          }
      }
